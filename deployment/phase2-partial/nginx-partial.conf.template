# Partial Rollout Traffic Splitting Configuration
# Dynamic traffic percentage based on environment variable

events {
    worker_connections 1024;
}

http {
    # Logging configuration
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream_addr="$upstream_addr" '
                    'upstream_status="$upstream_status" '
                    'request_time=$request_time '
                    'upstream_response_time=$upstream_response_time '
                    'routing_decision="$routing_decision"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Rate limiting for protection
    limit_req_zone $binary_remote_addr zone=api:10m rate=200r/s;
    
    # Upstream servers with health checks
    upstream pokemon_legacy {
        server pokemon-gym-legacy:8080 max_fails=3 fail_timeout=30s weight=100;
        keepalive 16;
    }
    
    upstream routing_engine {
        server message-routing-engine:8080 max_fails=2 fail_timeout=15s weight=100;
        keepalive 32;
    }
    
    # Traffic splitting logic
    map $request_uri $routing_decision {
        default "legacy";
    }
    
    # Split clients directive for percentage-based routing
    split_clients $request_id $backend_pool {
        ${TRAFFIC_PERCENTAGE}%   routing_engine;
        *                        pokemon_legacy;
    }
    
    # Health check endpoint
    server {
        listen 80;
        server_name health.local;
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
    
    # Main traffic routing server
    server {
        listen 80 default_server;
        server_name _;
        
        # Rate limiting
        limit_req zone=api burst=50 nodelay;
        
        # Health check endpoints - always route to appropriate service
        location /health {
            proxy_pass http://pokemon_legacy/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        location /health/routing {
            proxy_pass http://routing_engine/health/routing;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        location /health/classifier {
            proxy_pass http://routing_engine/health/classifier;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        location /health/queues {
            proxy_pass http://routing_engine/health/queues;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        # Metrics endpoints - route to new engine
        location /metrics {
            proxy_pass http://routing_engine/metrics;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        # Admin endpoints - route to new engine with auth
        location /admin/ {
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            proxy_pass http://routing_engine/admin/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        # Main application routing - percentage-based traffic splitting
        location / {
            # Set routing decision variable
            set $routing_decision $backend_pool;
            
            # Route based on split decision
            proxy_pass http://$backend_pool;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Routing-Decision $routing_decision;
            proxy_set_header X-Traffic-Percentage "${TRAFFIC_PERCENTAGE}";
            
            # Connection settings optimized for routing engine
            proxy_connect_timeout 3s;
            proxy_send_timeout 15s;
            proxy_read_timeout 60s;
            proxy_buffering on;
            proxy_buffer_size 16k;
            proxy_buffers 8 16k;
            
            # Circuit breaker - fallback to legacy on routing engine failures
            proxy_next_upstream error timeout http_502 http_503 http_504;
            proxy_next_upstream_timeout 5s;
            proxy_next_upstream_tries 2;
        }
        
        # API endpoints - intelligent routing based on request type
        location /route/ {
            # Always route to new routing engine for API calls
            proxy_pass http://routing_engine;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-API-Request "true";
            
            # Optimized timeouts for API calls
            proxy_connect_timeout 2s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;
        }
    }
    
    # Upstream health monitoring
    upstream_conf {
        server pokemon_legacy backup;
        server routing_engine;
    }
}

# Stream module for TCP load balancing (if needed)
stream {
    log_format basic '$remote_addr [$time_local] '
                     '$protocol $status $bytes_sent $bytes_received '
                     '$session_time "$upstream_addr" '
                     '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"';
    
    access_log /var/log/nginx/stream-access.log basic;
    error_log /var/log/nginx/stream-error.log warn;
}